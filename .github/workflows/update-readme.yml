name: Update README with file dates

on:
  schedule:
    - cron: '0 0 * * *'     # 每天 UTC 00:00（北京 08:00）
  workflow_dispatch:
  push:
    branches-ignore: [ gh-pages ]

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Detect default branch
        id: branch
        run: |
          DEFAULT=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
          echo "branch=$DEFAULT" >> $GITHUB_OUTPUT

      - name: Get last commit dates → [Last updated: YYYY-MM-DD HH:MM:SS +0800]
        id: getdates
        run: |
          set -uo pipefail

          FILE_ALL="HiddifyConfigsCLI/bin/Debug/net8.0/valid_links.txt"
          FILE_01="HiddifyConfigsCLI/bin/Debug/net8.0/valid_links_01.txt"
          FILE_02="HiddifyConfigsCLI/bin/Debug/net8.0/valid_links_02.txt"

          # 调试：打印文件是否存在
          echo "=== 文件检查 ==="
          ls -la "$FILE_ALL" || echo "FILE_ALL 不存在"
          ls -la "$FILE_01" || echo "FILE_01 不存在"
          ls -la "$FILE_02" || echo "FILE_02 不存在"

          format_date() {
            local f="$1"
            if git log -1 --format=%cI -- "$f" >/dev/null 2>&1; then
              # 调试：打印原始 UTC 时间
              RAW_UTC=$(TZ=UTC git log -1 --format=%cI -- "$f")
              echo "Raw UTC for $f: $RAW_UTC"
              # +8 小时 → 北京时间
              TZ=UTC git log -1 --format=%cI -- "$f" |
                xargs -I {} date -d "{} + 8 hours" +"[Last updated: %Y-%m-%d %H:%M:%S +0800]"
            else
              echo "[Last updated: N/A]"
            fi
          }

          ALL_DATE=$(format_date "$FILE_ALL")
          L01_DATE=$(format_date "$FILE_01")
          L02_DATE=$(format_date "$FILE_02")

          # 调试：打印最终日期
          echo "=== 最终日期输出 ==="
          echo "ALL_DATE: $ALL_DATE"
          echo "L01_DATE: $L01_DATE"
          echo "L02_DATE: $L02_DATE"

          echo "ALL=$ALL_DATE" >> $GITHUB_OUTPUT
          echo "L01=$L01_DATE" >> $GITHUB_OUTPUT
          echo "L02=$L02_DATE" >> $GITHUB_OUTPUT

      - name: Update README.md (用 envsubst 替换，带调试)
        run: |
          # 调试：打印替换前 README
          echo "=== 替换前 README 片段 ==="
          grep -A 5 -B 1 "{{DATE" README.md || echo "未找到占位符！"

          # 设置环境变量（envsubst 用）
          export DATE_VALID_ALL="${{ steps.getdates.outputs.ALL }}"
          export DATE_VALID_01="${{ steps.getdates.outputs.L01 }}"
          export DATE_VALID_02="${{ steps.getdates.outputs.L02 }}"

          # 用 envsubst 替换（更稳，支持 ${VAR} 格式）
          envsubst < README.md > README.new
          mv README.new README.md

          # 调试：打印替换后
          echo "=== 替换后 README 片段 ==="
          grep -A 5 -B 1 "Last updated" README.md || echo "替换失败？"

      - name: Commit & push if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # 先拉取最新
          git fetch origin "${{ steps.branch.outputs.branch }}"
          git rebase "origin/${{ steps.branch.outputs.branch }}" || \
            (git rebase --abort && git merge "origin/${{ steps.branch.outputs.branch }}")

          # 调试：打印 diff 结果
          echo "=== Git diff README.md ==="
          git diff README.md

          if git diff --quiet README.md; then
            echo "No changes in README.md"
            exit 0
          fi

          git add README.md
          git commit -m "Auto update file dates in README [skip ci]"
          git push origin HEAD:"${{ steps.branch.outputs.branch }}"
